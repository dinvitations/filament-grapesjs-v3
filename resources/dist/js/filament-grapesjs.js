// resources/js/index.js
var grapesInstance = null;
document.addEventListener("alpine:init", () => {
  Alpine.data(
    "grapesjs",
    ({ $wire, state, statePath, readOnly, tools, minHeight, container, plugins, settings }) => ({
      instance: null,
      state,
      tools,
      plugins,
      settings,
      init() {
        let enabledTools = {};
        let allSettings = {
          height: minHeight + "px",
          container: container ? container : ".filament-grapesjs .grapesjs-wrapper",
          showOffsets: true,
          fromElement: true,
          noticeOnUnload: false,
          storageManager: false,
          plugins,
          ...settings
        };
        grapesInstance = grapesjs.init(allSettings);
        this.instance = grapesInstance;
        grapesInstance.on("load", () => {
          if (isNotEmpty(this.state?.grapesjs?.projectData)) {
            grapesInstance.loadProjectData(JSON.parse(this.state.grapesjs.projectData));
          } else {
            if (isNotEmpty(this.state?.grapesjs?.components)) {
              grapesInstance.setComponents(JSON.parse(this.state.grapesjs.components));
            } else if (isNotEmpty(this.state?.html)) {
              grapesInstance.setComponents(this.state.html);
            }
            if (isNotEmpty(this.state?.grapesjs?.style)) {
              grapesInstance.setStyle(JSON.parse(this.state.grapesjs.style));
            } else if (isNotEmpty(this.state?.css)) {
              grapesInstance.setStyle(this.state.css);
            }
          }
          if (settings?.disableDrag) {
            grapesInstance.getWrapper().find("*").forEach((comp) => {
              comp.set({
                draggable: false,
                droppable: false,
                selectable: true,
                hoverable: true,
                highlightable: true
              });
              comp.set("resizable", false);
            });
            grapesInstance.BlockManager.getAll().reset();
            grapesInstance.on("component:drag:start", (ev) => ev.abort());
          }
        });
        grapesInstance.on("update", () => {
          const projectData = grapesInstance.getProjectData();
          const components = grapesInstance.getComponents();
          const styles = grapesInstance.getStyle();
          const rawHtml = grapesInstance.getHtml({ cleanId: true });
          const cssContent = grapesInstance.getCss();
          const jsContent = grapesInstance.getJs();
          const extract = rawHtml.match(/<body\b[^>]*>([\s\S]*?)<\/body>/);
          const htmlContent = extract ? extract[1] : rawHtml;
          this.state = {
            grapesjs: {
              projectData,
              components,
              styles
            },
            html: htmlContent,
            css: cssContent,
            js: jsContent
          };
        });
        $wire.on("refreshGrapesJs", () => {
          this.refreshGrapesJs();
        });
      },
      refreshGrapesJs() {
        if (!grapesInstance || !this.state?.grapesjs?.projectData)
          return;
        try {
          const projectData = JSON.parse(this.state.grapesjs.projectData);
          grapesInstance.loadProjectData(projectData);
        } catch (e) {
          console.error("Failed to refresh GrapesJS project data:", e);
        }
      }
    })
  );
  window.dispatchEvent(new CustomEvent("grapesjs-script-loaded"));
});
function isNotEmpty(val) {
  if (val === null || val === void 0)
    return false;
  if (Array.isArray(val))
    return val.length > 0;
  if (typeof val === "object")
    return Object.keys(val).length > 0;
  if (typeof val === "string")
    return val.trim() !== "" && val.trim() !== "0";
  return !!val;
}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vanMvaW5kZXguanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImxldCBncmFwZXNJbnN0YW5jZSA9IG51bGw7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2FscGluZTppbml0JywgKCkgPT4ge1xuICAgIEFscGluZS5kYXRhKFxuICAgICAgICBcImdyYXBlc2pzXCIsXG4gICAgICAgICh7ICR3aXJlLCBzdGF0ZSwgc3RhdGVQYXRoLCByZWFkT25seSwgdG9vbHMsIG1pbkhlaWdodCwgY29udGFpbmVyLCBwbHVnaW5zLCBzZXR0aW5ncyB9KSA9PiAoe1xuICAgICAgICAgICAgaW5zdGFuY2U6IG51bGwsXG4gICAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICAgIHRvb2xzLFxuICAgICAgICAgICAgcGx1Z2lucyxcbiAgICAgICAgICAgIHNldHRpbmdzLFxuXG4gICAgICAgICAgICBpbml0KCkge1xuICAgICAgICAgICAgICAgIGxldCBlbmFibGVkVG9vbHMgPSB7fTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgYWxsU2V0dGluZ3MgPSB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogbWluSGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIgPyBjb250YWluZXIgOiBcIi5maWxhbWVudC1ncmFwZXNqcyAuZ3JhcGVzanMtd3JhcHBlclwiLFxuICAgICAgICAgICAgICAgICAgICBzaG93T2Zmc2V0czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZnJvbUVsZW1lbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG5vdGljZU9uVW5sb2FkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3RvcmFnZU1hbmFnZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBwbHVnaW5zOiBwbHVnaW5zLFxuICAgICAgICAgICAgICAgICAgICAuLi5zZXR0aW5nc1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBncmFwZXNJbnN0YW5jZSA9IGdyYXBlc2pzLmluaXQoYWxsU2V0dGluZ3MpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZSA9IGdyYXBlc0luc3RhbmNlO1xuXG4gICAgICAgICAgICAgICAgZ3JhcGVzSW5zdGFuY2Uub24oJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05vdEVtcHR5KHRoaXMuc3RhdGU/LmdyYXBlc2pzPy5wcm9qZWN0RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBlc0luc3RhbmNlLmxvYWRQcm9qZWN0RGF0YShKU09OLnBhcnNlKHRoaXMuc3RhdGUuZ3JhcGVzanMucHJvamVjdERhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05vdEVtcHR5KHRoaXMuc3RhdGU/LmdyYXBlc2pzPy5jb21wb25lbnRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBlc0luc3RhbmNlLnNldENvbXBvbmVudHMoSlNPTi5wYXJzZSh0aGlzLnN0YXRlLmdyYXBlc2pzLmNvbXBvbmVudHMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOb3RFbXB0eSh0aGlzLnN0YXRlPy5odG1sKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBlc0luc3RhbmNlLnNldENvbXBvbmVudHModGhpcy5zdGF0ZS5odG1sKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTm90RW1wdHkodGhpcy5zdGF0ZT8uZ3JhcGVzanM/LnN0eWxlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBlc0luc3RhbmNlLnNldFN0eWxlKEpTT04ucGFyc2UodGhpcy5zdGF0ZS5ncmFwZXNqcy5zdHlsZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc05vdEVtcHR5KHRoaXMuc3RhdGU/LmNzcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmFwZXNJbnN0YW5jZS5zZXRTdHlsZSh0aGlzLnN0YXRlLmNzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3M/LmRpc2FibGVEcmFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncmFwZXNJbnN0YW5jZS5nZXRXcmFwcGVyKCkuZmluZCgnKicpLmZvckVhY2goY29tcCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcC5zZXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wcGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3ZlcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wLnNldCgncmVzaXphYmxlJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBncmFwZXNJbnN0YW5jZS5CbG9ja01hbmFnZXIuZ2V0QWxsKCkucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBlc0luc3RhbmNlLm9uKCdjb21wb25lbnQ6ZHJhZzpzdGFydCcsIChldikgPT4gZXYuYWJvcnQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGdyYXBlc0luc3RhbmNlLm9uKCd1cGRhdGUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2plY3REYXRhID0gZ3JhcGVzSW5zdGFuY2UuZ2V0UHJvamVjdERhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tcG9uZW50cyA9IGdyYXBlc0luc3RhbmNlLmdldENvbXBvbmVudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gZ3JhcGVzSW5zdGFuY2UuZ2V0U3R5bGUoKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCByYXdIdG1sID0gZ3JhcGVzSW5zdGFuY2UuZ2V0SHRtbCh7IGNsZWFuSWQ6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNzc0NvbnRlbnQgPSBncmFwZXNJbnN0YW5jZS5nZXRDc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QganNDb250ZW50ID0gZ3JhcGVzSW5zdGFuY2UuZ2V0SnMoKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBleHRyYWN0ID0gcmF3SHRtbC5tYXRjaCgvPGJvZHlcXGJbXj5dKj4oW1xcc1xcU10qPyk8XFwvYm9keT4vKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaHRtbENvbnRlbnQgPSBleHRyYWN0ID8gZXh0cmFjdFsxXSA6IHJhd0h0bWw7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBlc2pzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdERhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sOiBodG1sQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzczogY3NzQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzOiBqc0NvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICR3aXJlLm9uKCdyZWZyZXNoR3JhcGVzSnMnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaEdyYXBlc0pzKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICByZWZyZXNoR3JhcGVzSnMoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFncmFwZXNJbnN0YW5jZSB8fCAhdGhpcy5zdGF0ZT8uZ3JhcGVzanM/LnByb2plY3REYXRhKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9qZWN0RGF0YSA9IEpTT04ucGFyc2UodGhpcy5zdGF0ZS5ncmFwZXNqcy5wcm9qZWN0RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGdyYXBlc0luc3RhbmNlLmxvYWRQcm9qZWN0RGF0YShwcm9qZWN0RGF0YSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gcmVmcmVzaCBHcmFwZXNKUyBwcm9qZWN0IGRhdGE6JywgZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICk7XG5cbiAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2dyYXBlc2pzLXNjcmlwdC1sb2FkZWQnKSk7XG59KTtcblxuXG5mdW5jdGlvbiBpc05vdEVtcHR5KHZhbCkge1xuICAgIGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHJldHVybiB2YWwubGVuZ3RoID4gMDtcbiAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHJldHVybiBPYmplY3Qua2V5cyh2YWwpLmxlbmd0aCA+IDA7XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSByZXR1cm4gdmFsLnRyaW0oKSAhPT0gJycgJiYgdmFsLnRyaW0oKSAhPT0gJzAnO1xuXG4gICAgcmV0dXJuICEhdmFsO1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLElBQUksaUJBQWlCO0FBRXJCLFNBQVMsaUJBQWlCLGVBQWUsTUFBTTtBQUMzQyxTQUFPO0FBQUEsSUFDSDtBQUFBLElBQ0EsQ0FBQyxFQUFFLE9BQU8sT0FBTyxXQUFXLFVBQVUsT0FBTyxXQUFXLFdBQVcsU0FBUyxTQUFTLE9BQU87QUFBQSxNQUN4RixVQUFVO0FBQUEsTUFDVjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BRUEsT0FBTztBQUNILFlBQUksZUFBZSxDQUFDO0FBRXBCLFlBQUksY0FBYztBQUFBLFVBQ2QsUUFBUSxZQUFZO0FBQUEsVUFDcEIsV0FBVyxZQUFZLFlBQVk7QUFBQSxVQUNuQyxhQUFhO0FBQUEsVUFDYixhQUFhO0FBQUEsVUFDYixnQkFBZ0I7QUFBQSxVQUNoQixnQkFBZ0I7QUFBQSxVQUNoQjtBQUFBLFVBQ0EsR0FBRztBQUFBLFFBQ1A7QUFFQSx5QkFBaUIsU0FBUyxLQUFLLFdBQVc7QUFFMUMsYUFBSyxXQUFXO0FBRWhCLHVCQUFlLEdBQUcsUUFBUSxNQUFNO0FBQzVCLGNBQUksV0FBVyxLQUFLLE9BQU8sVUFBVSxXQUFXLEdBQUc7QUFDL0MsMkJBQWUsZ0JBQWdCLEtBQUssTUFBTSxLQUFLLE1BQU0sU0FBUyxXQUFXLENBQUM7QUFBQSxVQUM5RSxPQUFPO0FBQ0gs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
