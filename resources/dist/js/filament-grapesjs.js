// resources/js/index.js
document.addEventListener("alpine:init", () => {
  Alpine.data(
    "grapesjs",
    ({ state, statePath, readOnly, tools, minHeight, container, plugins, settings }) => ({
      instance: null,
      state,
      tools,
      plugins,
      settings,
      init() {
        let enabledTools = {};
        let allSettings = {
          height: minHeight + "px",
          container: container ? container : ".filament-grapesjs .grapesjs-wrapper",
          showOffsets: true,
          fromElement: true,
          noticeOnUnload: false,
          storageManager: false,
          plugins,
          ...settings
        };
        this.instance = grapesjs.init(allSettings);
        this.instance.on("load", (e) => {
          if (isNotEmpty(this.state?.grapesjs?.projectData)) {
            this.instance.loadProjectData(JSON.parse(this.state.grapesjs.projectData));
          } else {
            if (isNotEmpty(this.state?.grapesjs?.components)) {
              this.instance.setComponents(JSON.parse(this.state.grapesjs.components));
            } else if (isNotEmpty(this.state?.html)) {
              this.instance.setComponents(this.state.html);
            }
            if (isNotEmpty(this.state?.grapesjs?.style)) {
              this.instance.setStyle(JSON.parse(this.state.grapesjs.style));
            } else if (isNotEmpty(this.state?.css)) {
              this.instance.setStyle(this.state.css);
            }
          }
        });
        this.instance.on("update", (e) => {
          var projectData = this.instance.getProjectData();
          var components = this.instance.getComponents();
          var styles = this.instance.getStyle();
          var rawHtml = this.instance.getHtml({
            cleanId: true
          });
          var cssContent = this.instance.getCss();
          var jsContent = this.instance.getJs();
          var extract = rawHtml.match(/<body\b[^>]*>([\s\S]*?)<\/body>/);
          var htmlContent = extract ? extract[1] : rawHtml;
          this.state = {
            grapesjs: {
              projectData,
              components,
              styles
            },
            html: htmlContent,
            css: cssContent,
            js: jsContent
          };
        });
      }
    })
  );
});
function isNotEmpty(val) {
  if (val === null || val === void 0)
    return false;
  if (Array.isArray(val)) {
    return val.length > 0;
  }
  if (typeof val === "object") {
    return Object.keys(val).length > 0;
  }
  if (typeof val === "string") {
    return val.trim() !== "" && val.trim() !== "0";
  }
  return !!val;
}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vanMvaW5kZXguanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2FscGluZTppbml0JywgKCkgPT4ge1xuICAgIEFscGluZS5kYXRhKFxuICAgICAgICBcImdyYXBlc2pzXCIsXG4gICAgICAgICh7IHN0YXRlLCBzdGF0ZVBhdGgsIHJlYWRPbmx5LCB0b29scywgbWluSGVpZ2h0LCBjb250YWluZXIsIHBsdWdpbnMsIHNldHRpbmdzIH0pID0+ICh7XG4gICAgICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgIHRvb2xzOiB0b29scyxcbiAgICAgICAgICAgIHBsdWdpbnM6IHBsdWdpbnMsXG4gICAgICAgICAgICBzZXR0aW5nczogc2V0dGluZ3MsXG4gICAgICAgICAgICBpbml0KCkge1xuICAgICAgICAgICAgICAgIGxldCBlbmFibGVkVG9vbHMgPSB7fTtcblxuICAgICAgICAgICAgICAgIGxldCBhbGxTZXR0aW5ncyA9IHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBtaW5IZWlnaHQgKyAncHgnLFxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lciA/IGNvbnRhaW5lciA6IFwiLmZpbGFtZW50LWdyYXBlc2pzIC5ncmFwZXNqcy13cmFwcGVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHNob3dPZmZzZXRzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmcm9tRWxlbWVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbm90aWNlT25VbmxvYWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdG9yYWdlTWFuYWdlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbnM6IHBsdWdpbnMsXG4gICAgICAgICAgICAgICAgICAgIC4uLnNldHRpbmdzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UgPSAgZ3JhcGVzanMuaW5pdCggYWxsU2V0dGluZ3MgKTtcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLm9uKCdsb2FkJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05vdEVtcHR5KHRoaXMuc3RhdGU/LmdyYXBlc2pzPy5wcm9qZWN0RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UubG9hZFByb2plY3REYXRhKEpTT04ucGFyc2UodGhpcy5zdGF0ZS5ncmFwZXNqcy5wcm9qZWN0RGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTm90RW1wdHkodGhpcy5zdGF0ZT8uZ3JhcGVzanM/LmNvbXBvbmVudHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS5zZXRDb21wb25lbnRzKEpTT04ucGFyc2UodGhpcy5zdGF0ZS5ncmFwZXNqcy5jb21wb25lbnRzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzTm90RW1wdHkodGhpcy5zdGF0ZT8uaHRtbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLnNldENvbXBvbmVudHModGhpcy5zdGF0ZS5odG1sKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTm90RW1wdHkodGhpcy5zdGF0ZT8uZ3JhcGVzanM/LnN0eWxlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2Uuc2V0U3R5bGUoSlNPTi5wYXJzZSh0aGlzLnN0YXRlLmdyYXBlc2pzLnN0eWxlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzTm90RW1wdHkodGhpcy5zdGF0ZT8uY3NzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2Uuc2V0U3R5bGUodGhpcy5zdGF0ZS5jc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS5vbigndXBkYXRlJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9qZWN0RGF0YSA9IHRoaXMuaW5zdGFuY2UuZ2V0UHJvamVjdERhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudHMgPSB0aGlzLmluc3RhbmNlLmdldENvbXBvbmVudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0eWxlcyA9IHRoaXMuaW5zdGFuY2UuZ2V0U3R5bGUoKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmF3SHRtbCA9IHRoaXMuaW5zdGFuY2UuZ2V0SHRtbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhbklkOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3NzQ29udGVudCA9IHRoaXMuaW5zdGFuY2UuZ2V0Q3NzKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBqc0NvbnRlbnQgPSB0aGlzLmluc3RhbmNlLmdldEpzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4dHJhY3QgPSByYXdIdG1sLm1hdGNoKC88Ym9keVxcYltePl0qPihbXFxzXFxTXSo/KTxcXC9ib2R5Pi8pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaHRtbENvbnRlbnQgPSBleHRyYWN0ID8gZXh0cmFjdFsxXSA6IHJhd0h0bWw7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBlc2pzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdERhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sOiBodG1sQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzczogY3NzQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzOiBqc0NvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIClcbn0pXG5cbmZ1bmN0aW9uIGlzTm90RW1wdHkodmFsKSB7XG4gICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICByZXR1cm4gdmFsLmxlbmd0aCA+IDA7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh2YWwpLmxlbmd0aCA+IDA7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWwudHJpbSgpICE9PSAnJyAmJiB2YWwudHJpbSgpICE9PSAnMCc7XG4gICAgfVxuXG4gICAgcmV0dXJuICEhdmFsO1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLFNBQVMsaUJBQWlCLGVBQWUsTUFBTTtBQUMzQyxTQUFPO0FBQUEsSUFDSDtBQUFBLElBQ0EsQ0FBQyxFQUFFLE9BQU8sV0FBVyxVQUFVLE9BQU8sV0FBVyxXQUFXLFNBQVMsU0FBUyxPQUFPO0FBQUEsTUFDakYsVUFBVTtBQUFBLE1BQ1Y7QUFBQSxNQUNBO0FBQUEsTUFDQTtB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
