// resources/js/index.js
document.addEventListener("alpine:init", () => {
  Alpine.data(
    "grapesjs",
    ({ state, statePath, readOnly, tools, minHeight, container, plugins, settings }) => ({
      instance: null,
      state,
      tools,
      plugins,
      settings,
      init() {
        let enabledTools = {};
        let allSettings = {
          height: minHeight + "px",
          container: container ? container : ".filament-grapesjs .grapesjs-wrapper",
          showOffsets: true,
          fromElement: true,
          noticeOnUnload: false,
          storageManager: false,
          plugins,
          ...settings
        };
        this.instance = grapesjs.init(allSettings);
        this.instance.on("load", (e) => {
          if (this.state?.grapesjs?.projectData) {
            this.instance.loadProjectData(JSON.parse(this.state.grapesjs.projectData));
          } else {
            if (this.state?.grapesjs?.components) {
              this.instance.setComponents(JSON.parse(this.state.grapesjs.components));
            } else if (this.state?.html) {
              this.instance.setComponents(this.state.html);
            }
            if (this.state?.grapesjs?.style) {
              this.instance.setStyle(JSON.parse(this.state.grapesjs.style));
            } else if (this.state?.css) {
              this.instance.setStyle(this.state.css);
            }
          }
        });
        this.instance.on("update", (e) => {
          var projectData = this.instance.getProjectData();
          var components = this.instance.getComponents();
          var styles = this.instance.getStyle();
          var rawHtml = this.instance.getHtml({
            cleanId: true
          });
          var cssContent = this.instance.getCss();
          var jsContent = this.instance.getJs();
          var extract = rawHtml.match(/<body\b[^>]*>([\s\S]*?)<\/body>/);
          var htmlContent = extract ? extract[1] : rawHtml;
          this.state = {
            grapesjs: {
              projectData,
              components,
              styles
            },
            html: htmlContent,
            css: cssContent,
            js: jsContent
          };
        });
      }
    })
  );
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vanMvaW5kZXguanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2FscGluZTppbml0JywgKCkgPT4ge1xuICAgIEFscGluZS5kYXRhKFxuICAgICAgICBcImdyYXBlc2pzXCIsXG4gICAgICAgICh7IHN0YXRlLCBzdGF0ZVBhdGgsIHJlYWRPbmx5LCB0b29scywgbWluSGVpZ2h0LCBjb250YWluZXIsIHBsdWdpbnMsIHNldHRpbmdzIH0pID0+ICh7XG4gICAgICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgIHRvb2xzOiB0b29scyxcbiAgICAgICAgICAgIHBsdWdpbnM6IHBsdWdpbnMsXG4gICAgICAgICAgICBzZXR0aW5nczogc2V0dGluZ3MsXG4gICAgICAgICAgICBpbml0KCkge1xuICAgICAgICAgICAgICAgIGxldCBlbmFibGVkVG9vbHMgPSB7fTtcblxuICAgICAgICAgICAgICAgIGxldCBhbGxTZXR0aW5ncyA9IHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBtaW5IZWlnaHQgKyAncHgnLFxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lciA/IGNvbnRhaW5lciA6IFwiLmZpbGFtZW50LWdyYXBlc2pzIC5ncmFwZXNqcy13cmFwcGVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHNob3dPZmZzZXRzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmcm9tRWxlbWVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbm90aWNlT25VbmxvYWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdG9yYWdlTWFuYWdlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbnM6IHBsdWdpbnMsXG4gICAgICAgICAgICAgICAgICAgIC4uLnNldHRpbmdzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UgPSAgZ3JhcGVzanMuaW5pdCggYWxsU2V0dGluZ3MgKTtcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLm9uKCdsb2FkJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlPy5ncmFwZXNqcz8ucHJvamVjdERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UubG9hZFByb2plY3REYXRhKEpTT04ucGFyc2UodGhpcy5zdGF0ZS5ncmFwZXNqcy5wcm9qZWN0RGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGU/LmdyYXBlc2pzPy5jb21wb25lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS5zZXRDb21wb25lbnRzKEpTT04ucGFyc2UodGhpcy5zdGF0ZS5ncmFwZXNqcy5jb21wb25lbnRzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGU/Lmh0bWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLnNldENvbXBvbmVudHModGhpcy5zdGF0ZS5odG1sKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGU/LmdyYXBlc2pzPy5zdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2Uuc2V0U3R5bGUoSlNPTi5wYXJzZSh0aGlzLnN0YXRlLmdyYXBlc2pzLnN0eWxlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGU/LmNzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2Uuc2V0U3R5bGUodGhpcy5zdGF0ZS5jc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS5vbigndXBkYXRlJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9qZWN0RGF0YSA9IHRoaXMuaW5zdGFuY2UuZ2V0UHJvamVjdERhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudHMgPSB0aGlzLmluc3RhbmNlLmdldENvbXBvbmVudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0eWxlcyA9IHRoaXMuaW5zdGFuY2UuZ2V0U3R5bGUoKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmF3SHRtbCA9IHRoaXMuaW5zdGFuY2UuZ2V0SHRtbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhbklkOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3NzQ29udGVudCA9IHRoaXMuaW5zdGFuY2UuZ2V0Q3NzKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBqc0NvbnRlbnQgPSB0aGlzLmluc3RhbmNlLmdldEpzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4dHJhY3QgPSByYXdIdG1sLm1hdGNoKC88Ym9keVxcYltePl0qPihbXFxzXFxTXSo/KTxcXC9ib2R5Pi8pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaHRtbENvbnRlbnQgPSBleHRyYWN0ID8gZXh0cmFjdFsxXSA6IHJhd0h0bWw7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBlc2pzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdERhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sOiBodG1sQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzczogY3NzQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzOiBqc0NvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIClcbn0pXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsU0FBUyxpQkFBaUIsZUFBZSxNQUFNO0FBQzNDLFNBQU87QUFBQSxJQUNIO0FBQUEsSUFDQSxDQUFDLEVBQUUsT0FBTyxXQUFXLFVBQVUsT0FBTyxXQUFXLFdBQVcsU0FBUyxTQUFTLE9BQU87QUFBQSxNQUNqRixVQUFVO0FBQUEsTUFDVjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0EsT0FBTztBQUNILFlBQUksZUFBZSxDQUFDO0FBRXBCLFlBQUksY0FBYztBQUFBLFVBQ2QsUUFBUSxZQUFZO0FBQUEsVUFDcEIsV0FBVyxZQUFZLFlBQVk7QUFBQSxVQUNuQyxhQUFhO0FBQUEsVUFDYixhQUFhO0FBQUEsVUFDYixnQkFBZ0I7QUFBQSxVQUNoQixnQkFBZ0I7QUFBQSxVQUNoQjtBQUFBLFVBQ0EsR0FBRztBQUFBLFFBQ1A7QUFDQSxhQUFLLFdBQVksU0FBUyxLQUFNLFdBQVk7QUFDNUMsYUFBSyxTQUFTLEdBQUcsUUFBUSxPQUFLO0FBQzFCLGNBQUksS0FBSyxPQUFPLFVBQVUsYUFBYTtBQUNuQyxpQkFBSyxTQUFTLGdCQUFnQixLQUFLLE1BQU0sS0FBSyxNQUFNLFNBQVMsV0FBVyxDQUFDO0FBQUEsVUFDN0UsT0FBTztBQUNILGdCQUFJLEtBQUssT0FBTyxVQUFVLFlBQVk7QUFDbEMsbUJBQUssU0FBUyxjQUFjLEtBQUssTUFBTSxLQUFLLE1BQU0sU0FBUyxVQUFVLENBQUM7QUFBQSxZQUMxRSxXQUFXLEtBQUssT0FBTyxNQUFNO0FBQ3pCLG1CQUFLLFNBQVMsY0FBYyxLQUFLLE1BQU0sSUFBSTtBQUFBLFlBQy9DO0FBRUEsZ0JBQUksS0FBSyxPQUFPLFVBQVUsT0FBTztBQUM3QixtQkFBSyxTQUFTLFNBQVMsS0FBSyxNQUFNLEtBQUssTUFBTSxTQUFTLEtBQUssQ0FBQztBQUFBLFlBQ2hFLFdBQVcsS0FBSyxPQUFPLEtBQUs7QUFDeEIsbUJBQUssU0FBUyxTQUFTLEtBQUssTUFBTSxHQUFHO0FBQUEsWUFDekM7QUFBQSxVQUNKO0FBQUEsUUFDSixDQUFDO0FBQ0QsYUFBSyxTQUFTLEdBQUcsVUFBVSxPQUFLO0FBQzVCLGNBQUksY0FBYyxLQUFLLFNBQVMsZUFBZTtBQUMvQyxjQUFJLGFBQWEsS0FBSyxTQUFTLGNBQWM7QUFDN0MsY0FBSSxTQUFTLEtBQUssU0FBUyxTQUFTO0FBRXBDLGNBQUksVUFBVSxLQUFLLFNBQVMsUUFBUTtBQUFBLFlBQ2hDLFNBQVM7QUFBQSxVQUNiLENBQUM7QUFDRCxjQUFJLGFBQWEsS0FBSyxTQUFTLE9BQU87QUFDdEMsY0FBSSxZQUFZLEtBQUssU0FBUyxNQUFNO0FBRXBDLGNBQUksVUFBVSxRQUFRLE1BQU0saUNBQWlDO0FBQzdELGNBQUksY0FBYyxVQUFVLFFBQVEsQ0FBQyxJQUFJO0FBRXpDLGVBQUssUUFBUTtBQUFBLFlBQ1QsVUFBVTtBQUFBLGNBQ047QUFBQSxjQUNBO0FBQUEsY0FDQTtBQUFBLFlBQ0o7QUFBQSxZQUNBLE1BQU07QUFBQSxZQUNOLEtBQUs7QUFBQSxZQUNMLElBQUk7QUFBQSxVQUNSO0FBQUEsUUFDSixDQUFDO0FBQUEsTUFDTDtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQ0osQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
