// resources/js/index.js
var grapesInstance = null;
document.addEventListener("alpine:init", () => {
  Alpine.data(
    "grapesjs",
    ({ state, statePath, readOnly, tools, minHeight, container, plugins, settings }) => ({
      instance: null,
      state,
      tools,
      plugins,
      settings,
      init() {
        let enabledTools = {};
        let allSettings = {
          height: minHeight + "px",
          container: container ? container : ".filament-grapesjs .grapesjs-wrapper",
          showOffsets: true,
          fromElement: true,
          noticeOnUnload: false,
          storageManager: false,
          plugins,
          ...settings
        };
        grapesInstance = grapesjs.init(allSettings);
        this.instance = grapesInstance;
        grapesInstance.on("load", () => {
          if (isNotEmpty(this.state?.grapesjs?.projectData)) {
            grapesInstance.loadProjectData(JSON.parse(this.state.grapesjs.projectData));
          } else {
            if (isNotEmpty(this.state?.grapesjs?.components)) {
              grapesInstance.setComponents(JSON.parse(this.state.grapesjs.components));
            } else if (isNotEmpty(this.state?.html)) {
              grapesInstance.setComponents(this.state.html);
            }
            if (isNotEmpty(this.state?.grapesjs?.style)) {
              grapesInstance.setStyle(JSON.parse(this.state.grapesjs.style));
            } else if (isNotEmpty(this.state?.css)) {
              grapesInstance.setStyle(this.state.css);
            }
          }
          if (settings?.disableBlocks) {
            grapesInstance.getWrapper().find("*").forEach((comp) => {
              comp.set({
                draggable: false,
                droppable: false,
                selectable: true,
                hoverable: true,
                highlightable: true,
                removable: false
              });
              comp.set("resizable", false);
            });
            grapesInstance.BlockManager.getAll().reset();
          }
          if (settings?.disableStyles) {
            grapesInstance.on("component:selected", (comp) => {
              comp.set({
                stylable: [
                  "background",
                  "background-color",
                  "color",
                  "font-family",
                  "font-size",
                  "font-style",
                  "font-weight",
                  "letter-spacing",
                  "line-height",
                  "text-align",
                  "text-decoration",
                  "text-shadow",
                  "text-transform",
                  "white-space",
                  "word-spacing"
                ]
              });
            });
          }
        });
        grapesInstance.on("update", () => {
          const projectData = grapesInstance.getProjectData();
          const components = grapesInstance.getComponents();
          const styles = grapesInstance.getStyle();
          const rawHtml = grapesInstance.getHtml({ cleanId: true });
          const cssContent = grapesInstance.getCss();
          const jsContent = grapesInstance.getJs();
          const extract = rawHtml.match(/<body\b[^>]*>([\s\S]*?)<\/body>/);
          const htmlContent = extract ? extract[1] : rawHtml;
          this.state = {
            ...this.state,
            grapesjs: {
              projectData,
              components,
              styles
            },
            html: htmlContent,
            css: cssContent,
            js: jsContent
          };
        });
      }
    })
  );
});
function isNotEmpty(val) {
  if (val === null || val === void 0)
    return false;
  if (Array.isArray(val))
    return val.length > 0;
  if (typeof val === "object")
    return Object.keys(val).length > 0;
  if (typeof val === "string")
    return val.trim() !== "" && val.trim() !== "0";
  return !!val;
}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vanMvaW5kZXguanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImxldCBncmFwZXNJbnN0YW5jZSA9IG51bGw7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2FscGluZTppbml0JywgKCkgPT4ge1xuICAgIEFscGluZS5kYXRhKFxuICAgICAgICBcImdyYXBlc2pzXCIsXG4gICAgICAgICh7IHN0YXRlLCBzdGF0ZVBhdGgsIHJlYWRPbmx5LCB0b29scywgbWluSGVpZ2h0LCBjb250YWluZXIsIHBsdWdpbnMsIHNldHRpbmdzIH0pID0+ICh7XG4gICAgICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgICAgdG9vbHMsXG4gICAgICAgICAgICBwbHVnaW5zLFxuICAgICAgICAgICAgc2V0dGluZ3MsXG5cbiAgICAgICAgICAgIGluaXQoKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVuYWJsZWRUb29scyA9IHt9O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCBhbGxTZXR0aW5ncyA9IHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBtaW5IZWlnaHQgKyAncHgnLFxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lciA/IGNvbnRhaW5lciA6IFwiLmZpbGFtZW50LWdyYXBlc2pzIC5ncmFwZXNqcy13cmFwcGVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHNob3dPZmZzZXRzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmcm9tRWxlbWVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbm90aWNlT25VbmxvYWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdG9yYWdlTWFuYWdlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbnM6IHBsdWdpbnMsXG4gICAgICAgICAgICAgICAgICAgIC4uLnNldHRpbmdzXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGdyYXBlc0luc3RhbmNlID0gZ3JhcGVzanMuaW5pdChhbGxTZXR0aW5ncyk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlID0gZ3JhcGVzSW5zdGFuY2U7XG5cbiAgICAgICAgICAgICAgICBncmFwZXNJbnN0YW5jZS5vbignbG9hZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTm90RW1wdHkodGhpcy5zdGF0ZT8uZ3JhcGVzanM/LnByb2plY3REYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JhcGVzSW5zdGFuY2UubG9hZFByb2plY3REYXRhKEpTT04ucGFyc2UodGhpcy5zdGF0ZS5ncmFwZXNqcy5wcm9qZWN0RGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTm90RW1wdHkodGhpcy5zdGF0ZT8uZ3JhcGVzanM/LmNvbXBvbmVudHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhcGVzSW5zdGFuY2Uuc2V0Q29tcG9uZW50cyhKU09OLnBhcnNlKHRoaXMuc3RhdGUuZ3JhcGVzanMuY29tcG9uZW50cykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc05vdEVtcHR5KHRoaXMuc3RhdGU/Lmh0bWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhcGVzSW5zdGFuY2Uuc2V0Q29tcG9uZW50cyh0aGlzLnN0YXRlLmh0bWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOb3RFbXB0eSh0aGlzLnN0YXRlPy5ncmFwZXNqcz8uc3R5bGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhcGVzSW5zdGFuY2Uuc2V0U3R5bGUoSlNPTi5wYXJzZSh0aGlzLnN0YXRlLmdyYXBlc2pzLnN0eWxlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzTm90RW1wdHkodGhpcy5zdGF0ZT8uY3NzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBlc0luc3RhbmNlLnNldFN0eWxlKHRoaXMuc3RhdGUuY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncz8uZGlzYWJsZUJsb2Nrcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JhcGVzSW5zdGFuY2UuZ2V0V3JhcHBlcigpLmZpbmQoXCIqXCIpLmZvckVhY2goKGNvbXApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXAuc2V0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3BwYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3ZlcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wLnNldChcInJlc2l6YWJsZVwiLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBlc0luc3RhbmNlLkJsb2NrTWFuYWdlci5nZXRBbGwoKS5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzPy5kaXNhYmxlU3R5bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncmFwZXNJbnN0YW5jZS5vbignY29tcG9uZW50OnNlbGVjdGVkJywgY29tcCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcC5zZXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsYWJsZTogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JhY2tncm91bmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtY29sb3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbG9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb250LWZhbWlseScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9udC1zaXplJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb250LXN0eWxlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb250LXdlaWdodCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGV0dGVyLXNwYWNpbmcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xpbmUtaGVpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LWFsaWduJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LWRlY29yYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQtc2hhZG93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LXRyYW5zZm9ybScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd2hpdGUtc3BhY2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dvcmQtc3BhY2luZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZ3JhcGVzSW5zdGFuY2Uub24oJ3VwZGF0ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvamVjdERhdGEgPSBncmFwZXNJbnN0YW5jZS5nZXRQcm9qZWN0RGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21wb25lbnRzID0gZ3JhcGVzSW5zdGFuY2UuZ2V0Q29tcG9uZW50cygpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHlsZXMgPSBncmFwZXNJbnN0YW5jZS5nZXRTdHlsZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd0h0bWwgPSBncmFwZXNJbnN0YW5jZS5nZXRIdG1sKHsgY2xlYW5JZDogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3NzQ29udGVudCA9IGdyYXBlc0luc3RhbmNlLmdldENzcygpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBqc0NvbnRlbnQgPSBncmFwZXNJbnN0YW5jZS5nZXRKcygpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4dHJhY3QgPSByYXdIdG1sLm1hdGNoKC88Ym9keVxcYltePl0qPihbXFxzXFxTXSo/KTxcXC9ib2R5Pi8pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBodG1sQ29udGVudCA9IGV4dHJhY3QgPyBleHRyYWN0WzFdIDogcmF3SHRtbDtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBlc2pzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdERhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sOiBodG1sQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzczogY3NzQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzOiBqc0NvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICApO1xufSk7XG5cbmZ1bmN0aW9uIGlzTm90RW1wdHkodmFsKSB7XG4gICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkgcmV0dXJuIHZhbC5sZW5ndGggPiAwO1xuICAgIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JykgcmV0dXJuIE9iamVjdC5rZXlzKHZhbCkubGVuZ3RoID4gMDtcbiAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHJldHVybiB2YWwudHJpbSgpICE9PSAnJyAmJiB2YWwudHJpbSgpICE9PSAnMCc7XG5cbiAgICByZXR1cm4gISF2YWw7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsSUFBSSxpQkFBaUI7QUFFckIsU0FBUyxpQkFBaUIsZUFBZSxNQUFNO0FBQzNDLFNBQU87QUFBQSxJQUNIO0FBQUEsSUFDQSxDQUFDLEVBQUUsT0FBTyxXQUFXLFVBQVUsT0FBTyxXQUFXLFdBQVcsU0FBUyxTQUFTLE9BQU87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
