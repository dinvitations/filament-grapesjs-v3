// resources/js/index.js
document.addEventListener("alpine:init", () => {
  Alpine.data(
    "grapesjs",
    ({ state, statePath, readOnly, tools, minHeight, container, plugins, settings }) => ({
      instance: null,
      state,
      tools,
      plugins,
      settings,
      init() {
        let enabledTools = {};
        let allSettings = {
          height: minHeight + "px",
          container: container ? container : ".filament-grapesjs .grapesjs-wrapper",
          showOffsets: true,
          fromElement: true,
          noticeOnUnload: false,
          storageManager: false,
          plugins,
          ...settings
        };
        this.instance = grapesjs.init(allSettings);
        this.instance.on("load", (e) => {
          if (this.state?.projectData) {
            const projectData = typeof this.state.projectData === "string" ? JSON.parse(this.state.projectData) : this.state.projectData;
            this.instance.loadProjectData(projectData);
          }
        });
        this.instance.on("update", (e) => {
          var projectData = this.instance.getProjectData();
          var rawHtml = this.instance.getHtml({
            cleanId: true
          });
          var cssContent = this.instance.getCss();
          var jsContent = this.instance.getJs();
          var extract = rawHtml.match(/<body\b[^>]*>([\s\S]*?)<\/body>/);
          var htmlContent = extract ? extract[1] : rawHtml;
          this.state = {
            projectData,
            html: htmlContent,
            css: cssContent,
            js: jsContent
          };
        });
      }
    })
  );
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vanMvaW5kZXguanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2FscGluZTppbml0JywgKCkgPT4ge1xuICAgIEFscGluZS5kYXRhKFxuICAgICAgICBcImdyYXBlc2pzXCIsXG4gICAgICAgICh7IHN0YXRlLCBzdGF0ZVBhdGgsIHJlYWRPbmx5LCB0b29scywgbWluSGVpZ2h0LCBjb250YWluZXIsIHBsdWdpbnMsIHNldHRpbmdzIH0pID0+ICh7XG4gICAgICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgIHRvb2xzOiB0b29scyxcbiAgICAgICAgICAgIHBsdWdpbnM6IHBsdWdpbnMsXG4gICAgICAgICAgICBzZXR0aW5nczogc2V0dGluZ3MsXG4gICAgICAgICAgICBpbml0KCkge1xuICAgICAgICAgICAgICAgIGxldCBlbmFibGVkVG9vbHMgPSB7fTtcblxuICAgICAgICAgICAgICAgIGxldCBhbGxTZXR0aW5ncyA9IHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBtaW5IZWlnaHQgKyAncHgnLFxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lciA/IGNvbnRhaW5lciA6IFwiLmZpbGFtZW50LWdyYXBlc2pzIC5ncmFwZXNqcy13cmFwcGVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHNob3dPZmZzZXRzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmcm9tRWxlbWVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbm90aWNlT25VbmxvYWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdG9yYWdlTWFuYWdlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbnM6IHBsdWdpbnMsXG4gICAgICAgICAgICAgICAgICAgIC4uLnNldHRpbmdzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UgPSAgZ3JhcGVzanMuaW5pdCggYWxsU2V0dGluZ3MgKTtcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLm9uKCdsb2FkJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlPy5wcm9qZWN0RGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvamVjdERhdGEgPSB0eXBlb2YgdGhpcy5zdGF0ZS5wcm9qZWN0RGF0YSA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IEpTT04ucGFyc2UodGhpcy5zdGF0ZS5wcm9qZWN0RGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuc3RhdGUucHJvamVjdERhdGE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UubG9hZFByb2plY3REYXRhKHByb2plY3REYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2Uub24oJ3VwZGF0ZScsIGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvamVjdERhdGEgPSB0aGlzLmluc3RhbmNlLmdldFByb2plY3REYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByYXdIdG1sID0gdGhpcy5pbnN0YW5jZS5nZXRIdG1sKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFuSWQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjc3NDb250ZW50ID0gdGhpcy5pbnN0YW5jZS5nZXRDc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGpzQ29udGVudCA9IHRoaXMuaW5zdGFuY2UuZ2V0SnMoKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgZXh0cmFjdCA9IHJhd0h0bWwubWF0Y2goLzxib2R5XFxiW14+XSo+KFtcXHNcXFNdKj8pPFxcL2JvZHk+Lyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBodG1sQ29udGVudCA9IGV4dHJhY3QgPyBleHRyYWN0WzFdIDogcmF3SHRtbDtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdERhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sOiBodG1sQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzczogY3NzQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzOiBqc0NvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIClcbn0pXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsU0FBUyxpQkFBaUIsZUFBZSxNQUFNO0FBQzNDLFNBQU87QUFBQSxJQUNIO0FBQUEsSUFDQSxDQUFDLEVBQUUsT0FBTyxXQUFXLFVBQVUsT0FBTyxXQUFXLFdBQVcsU0FBUyxTQUFTLE9BQU87QUFBQSxNQUNqRixVQUFVO0FBQUEsTUFDVjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0EsT0FBTztBQUNILFlBQUksZUFBZSxDQUFDO0FBRXBCLFlBQUksY0FBYztBQUFBLFVBQ2QsUUFBUSxZQUFZO0FBQUEsVUFDcEIsV0FBVyxZQUFZLFlBQVk7QUFBQSxVQUNuQyxhQUFhO0FBQUEsVUFDYixhQUFhO0FBQUEsVUFDYixnQkFBZ0I7QUFBQSxVQUNoQixnQkFBZ0I7QUFBQSxVQUNoQjtBQUFBLFVBQ0EsR0FBRztBQUFBLFFBQ1A7QUFDQSxhQUFLLFdBQVksU0FBUyxLQUFNLFdBQVk7QUFDNUMsYUFBSyxTQUFTLEdBQUcsUUFBUSxPQUFLO0FBQzFCLGNBQUksS0FBSyxPQUFPLGFBQWE7QUFDekIsa0JBQU0sY0FBYyxPQUFPLEtBQUssTUFBTSxnQkFBZ0IsV0FDaEQsS0FBSyxNQUFNLEtBQUssTUFBTSxXQUFXLElBQ2pDLEtBQUssTUFBTTtBQUVqQixpQkFBSyxTQUFTLGdCQUFnQixXQUFXO0FBQUEsVUFDN0M7QUFBQSxRQUNKLENBQUM7QUFDRCxhQUFLLFNBQVMsR0FBRyxVQUFVLE9BQUs7QUFDNUIsY0FBSSxjQUFjLEtBQUssU0FBUyxlQUFlO0FBQy9DLGNBQUksVUFBVSxLQUFLLFNBQVMsUUFBUTtBQUFBLFlBQ2hDLFNBQVM7QUFBQSxVQUNiLENBQUM7QUFDRCxjQUFJLGFBQWEsS0FBSyxTQUFTLE9BQU87QUFDdEMsY0FBSSxZQUFZLEtBQUssU0FBUyxNQUFNO0FBRXBDLGNBQUksVUFBVSxRQUFRLE1BQU0saUNBQWlDO0FBQzdELGNBQUksY0FBYyxVQUFVLFFBQVEsQ0FBQyxJQUFJO0FBRXpDLGVBQUssUUFBUTtBQUFBLFlBQ1Q7QUFBQSxZQUNBLE1BQU07QUFBQSxZQUNOLEtBQUs7QUFBQSxZQUNMLElBQUk7QUFBQSxVQUNSO0FBQUEsUUFDSixDQUFDO0FBQUEsTUFDTDtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQ0osQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
